[4:59 pm, 16/11/2022] Om Pawar: pragma solidity ^0.4.19;
//declared the solidarity version

//defining a contract
contract MyContract{
    address private owner;

    //define a constructor
    constructor() public{
        owner=msg.sender;
    }
   
    //function to get address of the owner
    function getOwner()

        public view returns (address){
            return owner;
        }

        //function to get return the balance of the owner 
        function getbalance()
        public view returns (uint256){
            return owner.balance;
        }

        //function to deposit money
        function deposit() external payable{
            require(msg.value ==2 ether, "Please send two ethers");

        }

        //function to withdraw money
        function withdraw() exterâ€¦
[4:59 pm, 16/11/2022] Om Pawar: studentmarks code
[4:59 pm, 16/11/2022] Om Pawar: // SPDX-License-Identifier: MIT
//Declare the solidity Version
pragma solidity >= 0.4.26; 

//Declare the smart Contract

contract StudentMarks {

    struct Student {
        int ID; 
        string fname;
        string lname; 
        int marks;
    }

    address owner; 
    int public stdCount = 0;
    mapping(int => Student) public stdRecords; 


    modifier onlyOwner {
        require(owner == msg.sender);
        _;
    }

    //Declaring the Constructors

    constructor() public
    {
        owner == msg.sender;
    }

    function addNewRecords(
        int _ID,
        string memory _fName,
        string memory _lName,
        int _marks
    ) public onlyOwner {
        stdCount = stdCount + 1;

            //fetch the data
            stdRecords[stdCount] = Student(_ID, _fName, _lName, _marks);


    }

    //function to add bonus marks
    function bonusMarks(int _bonus) public onlyOwner{
        stdRecords[stdCount].marks = stdRecords[stdCount].marks + _bonus; 
    }


}